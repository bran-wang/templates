heat_template_version: 2013-05-23

description: Template for vodafone testing

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use an Ubuntu based image.
    default: vodafone-081315
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: vodafone-key
  az1:
    type: string
    description: Availability zone 1
    default: nova:test140.sce.ibm.com
  az2:
    type: string
    description: Availability zone 2
    default: nova:test141.sce.ibm.com
  web_network:
    type: string
    label: Neutron network name for the web tier
    description: Public network to attach server to.
    default: up_net
  web_subnet:
    type: string
    label: Neutron subnet name for the web tier
    default: up_subnet
  app_network:
    type: string
    label: Neutron network name for the app tier
    description: Public network to attach server to.
    default: middle_net
  app_subnet:
    type: string
    label: Neutron subnet name for the app tier
    default: middle_subnet
  db_network:
    type: string
    label: Neutron network name for the db tier
    description: Public network to attach server to.
    default: bottom_net
  swift_network:
    type: string
    label: Neutron network name for the db tier
    description: Public network to attach server to.
    default: swift_net
  external_network:
    type: string
    label: Neutron network name for the db tier
    description: Public network to attach server to.
    default: ext-net
#  web_security_group:
#    type: string
#    description: Security group
#    default: web-sg
#  app_security_group:
#    type: string
#    description: Security group
#    default: app-sg
#  db_security_group:
#    type: string
#    description: Security group
#    default: db-sg
  web_port:
    type: string
    description: Protocol port used by the server
    default: 80
  app_port:
    type: string
    description: Protocol port used by the server
    default: 9000
  app_config:
    type: string
    description: the shell script text to use in the templates. Abstracted here so it doesn't need to be entered several times for multiple autoscaling groups
    default: |
      #!/bin/bash -ex

      HOSTNAME=`hostname`
      sed -i 's/127.0.1.1 vodafone/127.0.1.1 '$HOSTNAME'/g' /etc/hosts
      sed -i 's/127.0.0.1 vodafone-db-asg/__mysql_ip__ vodafone-db-asg/g' /etc/hosts
      sed -i 's/VODAFONE_DB_ASG=127.0.0.1/VODAFONE_DB_ASG=__mysql_ip__/g' /home/ubuntu/env
      update-rc.d vodafone-app defaults
      service vodafone-app start

  web_config:
    type: string
    description: this is essentially a dummy proxy server to act as a web layer so we can have an additional load balanced tier. In a real application this would do something useful other than forward requests.
    default: |
      #!/bin/bash -ex

      HOSTNAME=`hostname`
      sed -i 's/127.0.1.1 vodafone/127.0.1.1 '$HOSTNAME'/g' /etc/hosts
      sed -i 's/127.0.0.1 vodafone-app-asg/__lb_ip__ vodafone-app-asg/g' /etc/hosts
      sed -i 's/VODAFONE_APP_ASG=127.0.0.1/VODAFONE_APP_ASG=__lb_ip__/g' /home/ubuntu/env

      update-rc.d nginx defaults
      service nginx restart
      update-rc.d vodafone-web defaults
      service vodafone-web start

  db_config:
    type: string
    description: db config
    default: |
      #!/bin/bash -ex

      #IP="__mysql_ip__"
      HOSTNAME=`hostname`
      sed -i 's/127.0.1.1 vodafone/127.0.1.1 '$HOSTNAME'/g' /etc/hosts
      update-rc.d mysql defaults
      service mysql restart
      /home/ubuntu/app/bin/init_db.sh


resources:
  db_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        name: db_sg
        rules:
          - direction: egress
          - protocol: tcp
            direction: egress
            port_range_min: {get_param: web_port}
            port_range_max: {get_param: web_port}
          - protocol: tcp
            direction: ingress
            port_range_min: 3306
            port_range_max: 3306
          - protocol: tcp
            direction: ingress
            port_range_min: 22
            port_range_max: 22
          - protocol: icmp
            direction: ingress
          - protocol: icmp
            direction: egress

  app_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        name: app_sg
        rules:
          - direction: egress
          - protocol: tcp
            direction: ingress
            port_range_min: 22
            port_range_max: 22
          - protocol: icmp
            direction: ingress
          - protocol: icmp
            direction: egress
          - protocol: tcp
            direction: ingress
            port_range_min: {get_param: app_port}
            port_range_max: {get_param: app_port}
          - protocol: tcp
            direction: egress
            port_range_min: {get_param: web_port}
            port_range_max: {get_param: web_port}
          - protocol: tcp
            direction: egress
            port_range_min: 3306
            port_range_max: 3306

  web_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        name: web_sg
        rules:
          - direction: egress
          - protocol: tcp
            direction: ingress
            port_range_min: 22
            port_range_max: 22
          - protocol: icmp
            direction: ingress
          - protocol: icmp
            direction: egress
          - protocol: tcp
            direction: egress
            port_range_min: {get_param: app_port}
            port_range_max: {get_param: app_port}
          - protocol: tcp
            direction: ingress
            port_range_min: {get_param: web_port}
            port_range_max: {get_param: web_port}
          - protocol: tcp
            direction: egress
            port_range_min: {get_param: web_port}
            port_range_max: {get_param: web_port}

  db_app_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: db_network }
      security_groups:
        - { get_resource: db_security_group }
        #- { get_param: db_security_group }

  db_swift_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: swift_network }
      security_groups:
        - { get_resource: db_security_group }
        #- { get_param: db_security_group }

  db_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: db_app_port }
        - port: { get_resource: db_swift_port }
      config_drive: true
      user_data_format: RAW
      availability_zone: {get_param: az1}
      user_data: { get_param: db_config }

  webmonitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  webpool:
    type: OS::Neutron::Pool
    properties:
      protocol: TCP
      monitors: [{get_resource: webmonitor}]
      subnet: {get_param: web_subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: {get_param: web_port}

  appmonitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  apppool:
    type: OS::Neutron::Pool
    properties:
      protocol: TCP
      monitors: [{get_resource: appmonitor}]
      subnet: {get_param: app_subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: {get_param: app_port}

  asgappaz1:
    type: asg.yaml
    properties:
      min_size: 1
      max_size: 3
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
#      network: {get_param: az1_app_network}
      up_net: {get_param: app_network}
      down_net: {get_param: db_network}
      swift_net: {get_param: swift_network}
      pool_id: {get_resource: apppool}
#      pool_id: {get_param: app_tier_lb_pool_id}
      metering_az: "appaz1"
      az: {get_param: az1}
      security_group: { get_resource: app_security_group }
      #security_group: { get_param: app_security_group }
      protocol_port: {get_param: app_port}
#      protocol_port: 9000
      user_data:
        str_replace:
          params:
            __mysql_ip__: { get_attr: [db_app_port, fixed_ips, 0, ip_address] }
          template: { get_param: app_config }

  asgappaz2:
    type: asg.yaml
    properties:
      min_size: 1
      max_size: 3
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
#      network: {get_param: az2_app_network}
      up_net: {get_param: app_network}
      down_net: {get_param: db_network}
      swift_net: {get_param: swift_network}
      pool_id: {get_resource: apppool}
#      pool_id: {get_param: app_tier_lb_pool_id}
      metering_az: "appaz2"
      az: {get_param: az2}
      security_group: { get_resource: app_security_group }
      #security_group: { get_param: app_security_group }
      protocol_port: {get_param: app_port}
#      protocol_port: 9000
      user_data:
        str_replace:
          params:
            __mysql_ip__: { get_attr: [db_app_port, fixed_ips, 0, ip_address] }
          template: { get_param: app_config }

  asgwebaz1:
    type: asg.yaml
    properties:
      min_size: 1
      max_size: 3
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
#      network: {get_param: az1_web_network}
      up_net: {get_param: web_network}
      down_net: {get_param: app_network}
      swift_net: {get_param: swift_network}
      pool_id: {get_resource: webpool}
#      pool_id: {get_param: web_tier_lb_pool_id}
      metering_az: "webaz1"
      az: {get_param: az1}
      security_group: { get_resource: web_security_group }
      #security_group: { get_param: web_security_group }
      protocol_port: {get_param: web_port}
      user_data:
        str_replace:
          params:
            __lb_ip__: {get_attr: [apppool, vip, address]}
#            __lb_ip__: {get_param: app_tier_lb_vip_ip}
            __lb_port__: { get_param: web_port }

          template: { get_param: web_config }

  asgwebaz2:
    type: asg.yaml
    properties:
      min_size: 1
      max_size: 3
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
#      network: {get_param: az2_web_network}
      up_net: {get_param: web_network}
      down_net: {get_param: app_network}
      swift_net: {get_param: swift_network}
      pool_id: {get_resource: webpool}
#      pool_id: {get_param: web_tier_lb_pool_id}
      metering_az: "webaz2"
      az: {get_param: az2}
      security_group: { get_resource: web_security_group }
      #security_group: { get_param: web_security_group }
      protocol_port: {get_param: web_port}
      user_data:
        str_replace:
          params:
            __lb_ip__: {get_attr: [apppool, vip, address]}
            #__lb_ip__: {get_param: app_tier_lb_vip_ip}
            __lb_port__: { get_param: web_port }

          template: { get_param: web_config }

  applb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: {get_param: app_port}
#      protocol_port: 9000
      pool_id: {get_resource: apppool}

  weblb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: {get_param: web_port}
      pool_id: {get_resource: webpool}

  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_attr: [webpool, vip, port_id]}


outputs:
  vip_floatingip:
    description: The Floating IP of VirtualIP.
    value: { get_attr: [lb_floating, floating_ip_address] }
  db_ip:
    description: The IP address of the MySQL instance in AZ1.
    value: { get_attr: [db_app_port, fixed_ips, 0, ip_address] }
  app_pool_ip_address:
    value: {get_attr: [apppool, vip, address]}
    description: The IP address of the App load balancing pool
  web_pool_ip_address:
    value: {get_attr: [webpool, vip, address]}
    description: The IP address of the Web load balancing pool
  ceilometer_query:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util
          -q metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
      This is a Ceilometer query for statistics on the cpu_util meter
      Samples about OS::Nova::Server instances in this stack.  The -q
      parameter selects Samples according to the subject's metadata.
      When a VM's metadata includes an item of the form metering.X=Y,
      the corresponding Ceilometer resource has a metadata item of the
      form user_metadata.X=Y and samples about resources so tagged can
      be queried with a Ceilometer query term of the form
      metadata.user_metadata.X=Y.  In this case the nested stacks give
      their VMs metadata that is passed as a nested stack parameter,
      and this stack passes a metadata of the form metering.stack=Y,
      where Y is this stack's ID.
