heat_template_version: 2016-04-08

description: >
  This template demostrate how to create a cluster and attach a
  loadbalance policy to it.

parameters:
  flavor:
    description: Flavor for the instances to be created.
    type: string
    default: m1.nano
  image:
    description: Name or ID of the image to use for the instances.
    type: string
    default: cirros-0.3.4-x86_64-uec
  key_name:
    description: Name of an existing key pair to use for the instances.
    type: string
    default: elynn
  network:
    description: The network for the instances.
    type: string
    default: private
  floating_network_1:
    type: string
    default: vdu-pub-1
  floating_network_2:
    type: string
    default: vdu-pub-2

resources:
  base_mgmt:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-base-mgmt
      description: Base security group for all Clearwater nodes (management)
      rules:
        # All egress traffic
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6
        # ICMP
        - protocol: icmp
        # SSH
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        # SNMP
        - protocol: udp
          port_range_min: 161
          port_range_max: 161
        # etcd
        - protocol: tcp
          port_range_min: 2380
          port_range_max: 2380
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: base_mgmt } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 4000
          port_range_max: 4000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: base_mgmt } # omit remote_group_id to reference yourself

  dns:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-dns
      description: Security group for DNS nodes
      rules:
        # All egress traffic
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6
        # ICMP
        - protocol: icmp
        # SSH
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        # DNS
        - protocol: udp
          port_range_min: 53
          port_range_max: 53
        - protocol: tcp
          port_range_min: 53
          port_range_max: 53

  ellis_mgmt:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-ellis-mgmt
      description: Security group for Ellis nodes (management)
      rules:
        # HTTP
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        # HTTPS
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443

  bono_sig:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-bono-sig
      description: Security group for Bono nodes (signaling)
      rules:
        # STUN/TURN
        - protocol: udp
          port_range_min: 3478
          port_range_max: 3478
        - protocol: tcp
          port_range_min: 3478
          port_range_max: 3478
        # Internal SIP
        - protocol: tcp
          port_range_min: 5058
          port_range_max: 5058
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: bono_sig } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 5058
          port_range_max: 5058
          remote_mode: remote_group_id
          remote_group_id: { get_resource: sprout_sig }
        # External SIP
        - protocol: udp
          port_range_min: 5060
          port_range_max: 5060
        - protocol: tcp
          port_range_min: 5060
          port_range_max: 5060
        # External SIP/WebSocket
        - protocol: tcp
          port_range_min: 5062
          port_range_max: 5062
        # RTP
        - protocol: udp
          port_range_min: 32768
          port_range_max: 65535


  sprout_sig:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-sprout-sig
      description: Security group for Sprout nodes (signaling)
      rules:
        # Internal SIP
        - protocol: tcp
          port_range_min: 5052
          port_range_max: 5052
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout_sig } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 5054
          port_range_max: 5054
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout_sig } # omit remote_group_id to reference yourself
        # Chronos
        - protocol: tcp
          port_range_min: 7253
          port_range_max: 7253
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout_sig } # omit remote_group_id to reference yourself
        # Chronos timer pops
        - protocol: tcp
          port_range_min: 9888
          port_range_max: 9888
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout_sig } # omit remote_group_id to reference yourself
        # Memcached
        - protocol: tcp
          port_range_min: 11211
          port_range_max: 11211
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout_sig } # omit remote_group_id to reference yourself

  sprout_sig2:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-sprout-sig2
      description: Additional security group for Sprout nodes (signaling) - required to avoid circular dependency
      #            Specifically, Bono and Sprout depend on each other, as do Sprout and Homestead.  By dividing Sprout's
      #            security group into one for other nodes to depend on (sprout) and a second to depend on other nodes
      #            (sprout2), we break this cycle.
      rules:
        # Internal SIP
        - protocol: tcp
          port_range_min: 5052
          port_range_max: 5052
          remote_mode: remote_group_id
          remote_group_id: { get_resource: bono_sig }
        - protocol: tcp
          port_range_min: 5054
          port_range_max: 5054
          remote_mode: remote_group_id
          remote_group_id: { get_resource: bono_sig }
        # Notifications from Homestead
        - protocol: tcp
          port_range_min: 9888
          port_range_max: 9888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: homestead_sig }

  homer_mgmt:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-homer-mgmt
      description: Security group for Homer nodes (management)
      rules:
        # Ut/HTTP
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: sprout_sig }

  homer_sig:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-homer-sig
      description: Security group for Homer nodes (signaling)
      rules:
        # Ut/HTTP
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: sprout_sig }
        # Cassandra
        - protocol: tcp
          port_range_min: 7000
          port_range_max: 7000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homer_sig } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 9160
          port_range_max: 9160
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homer_sig } # omit remote_group_id to reference yourself

  homestead_mgmt:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-homestead-mgmt
      description: Security group for Homestead nodes (management)
      rules:
        # REST-ful Provisioning API
        - protocol: tcp
          port_range_min: 8889
          port_range_max: 8889
          remote_mode: remote_group_id
          remote_group_id: { get_resource: ellis_mgmt }

  homestead_sig:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-homestead-sig
      description: Security group for Homestead nodes (signaling)
      rules:
        # Cx-like HTTP API
        - protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: bono_sig }
        - protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: sprout_sig }
        # Cassandra
        - protocol: tcp
          port_range_min: 7000
          port_range_max: 7000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homestead_sig } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 9160
          port_range_max: 9160
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homestead_sig } # omit remote_group_id to reference yourself

  ralf_sig:
    type: OS::Neutron::SecurityGroup
    properties:
      name: clearwater-ralf-sig
      description: Security group for Ralf nodes (signaling)
      rules:
        # Rf-like/HTTP API
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: bono_sig }
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: sprout_sig }
        # Chronos
        - protocol: tcp
          port_range_min: 7253
          port_range_max: 7253
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf_sig } # omit remote_group_id to reference yourself
        # Chronos timer pops
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf_sig } # omit remote_group_id to reference yourself
        # Memcached
        - protocol: tcp
          port_range_min: 11211
          port_range_max: 11211
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf_sig } # omit remote_group_id to reference yourself
          
  mgmt_private_net:
    type: OS::Neutron::Net
    properties:
      name: clearwater-mgmt-private

  mgmt_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: clearwater-mgmt-private
      network_id: { get_resource: mgmt_private_net }
      ip_version: 4
      cidr: "192.168.0.0/24"
      dns_nameservers: ["8.8.8.8"]
      gateway_ip: "192.168.0.254"
      allocation_pools:
        - start: "192.168.0.3"
          end: "192.168.0.253"

  mgmt_router:
    type: OS::Neutron::Router
    properties:
      name: clearwater-mgmt-router
      external_gateway_info:
        network: {get_param: floating_network_1}

#   mgmt_router_gateway:
#     type: OS::Neutron::RouterGateway
#     # depends_on: [dns_profile, ellis_profile, bono_profile, sprout_profile, homer_profile]
#     properties:
#       router_id: { get_resource: mgmt_router }
#       network: {get_param: floating_network_1}

  mgmt_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: mgmt_router }
      subnet_id: { get_resource: mgmt_private_subnet }


  signal_private_net:
    type: OS::Neutron::Net
    properties:
      name: clearwater-signal-private

  signal_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: clearwater-signal-private
      network_id: { get_resource: signal_private_net }
      ip_version: 4
      cidr: "192.168.1.0/24"
      dns_nameservers: ["8.8.8.8"]
      gateway_ip: "192.168.1.254"
      allocation_pools:
        - start: "192.168.1.3"
          end: "192.168.1.253"

  signal_router:
    type: OS::Neutron::Router
    properties:
      name: clearwater-signal-router
      external_gateway_info:
        network: {get_param: floating_network_2}

#   signal_router_gateway:
#     type: OS::Neutron::RouterGateway
#     # depends_on: [dns_profile, ellis_profile, bono_profile, sprout_profile, homer_profile]
#     properties:
#       router_id: { get_resource: signal_router }
#       network: { get_param: floating_network_2}

  signal_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: signal_router }
      subnet_id: { get_resource: signal_private_subnet }

          
  dns_profile:
    type: OS::Senlin::Profile
    properties:
      type: os.senlin.vdu-1.0
      properties:
        name: dns
        flavor: {get_param: flavor}
        image: {get_param: image}
        networks:
          - network: { get_resource: mgmt_private_net }
            security_groups:
              - {get_resource: dns}
            floating_network: {get_param: floating_network_1}
          - network: { get_resource: signal_private_net }
            security_groups:
              - {get_resource: dns}
        user_data: |
          #!/bin/bash
          echo "nameserver 10.142.7.1" > /etc/resolv.conf
          /etc/init.d/networking restart
          # Log all output to file.
          exec > >(tee -a /var/log/clearwater-heat-dns.log) 2>&1
          set -x

          echo "{{ __private_sig_cidr__ }} {{ __zone__ }} {{ __dnssec_key__ }} {{ ports.1.fixed_ips.0.ip_address }}" >> /root/test.conf
          i_dn_range_length__: 1000

          # Set up the signaling network interface
          ip addr add {{ ports.1.fixed_ips.0.ip_address }}/$(echo "{{ __private_sig_cidr__ }}" | cut -d / -f 2) dev eth1
          ip link set dev eth1 up

          # Install BIND.
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install bind9 --yes

          # Update BIND configuration with the specified zone and key.
          cat >> /etc/bind/named.conf.local << EOF
          key {{ __zone__ }}. {
            algorithm "HMAC-MD5";
            secret "{{ __dnssec_key__ }}";
          };

          zone "{{ __zone__ }}" IN {
            type master;
            file "/var/lib/bind/db.{{__zone__}}";
            allow-update {
              key "{{ __zone__ }}".;
            };
          };
          EOF

          # Function to give DNS record type and IP address for specified IP address
          ip2rr() {
            if echo $1 | grep -q -e '[^0-9.]' ; then
              echo AAAA $1
            else
              echo A $1
            fi
          }

          # Create basic zone configuration.
          cat > /var/lib/bind/db.{{ __zone__ }} << EOF
          \$ORIGIN {{ __zone__ }}.
          \$TTL 1h
          @ IN SOA ns admin\@{{ __zone__ }}. ( $(date +%Y%m%d%H) 1d 2h 1w 30s )
          @ NS ns
          ns $(ip2rr {{ ports.0.floating_ip_address }})
          EOF
          chown root:bind /var/lib/bind/db.{{ __zone__ }}

          # Now that BIND configuration is correct, kick it to reload.
          service bind9 reload


 
  dns_cluster:
    type: OS::Senlin::Cluster
    depends_on:
      - signal_router_interface
      - mgmt_router_interface
    properties:
      desired_capacity: 1
      min_size: 1
      profile: {get_resource: dns_profile}
      metadata:
        config:
          __zone__: "example.com"
          __dnssec_key__: "b9Ft/pBOWOwme5WL3YJ+QrH2i/ZiJarRNHMXlP5mSfjaxVreZ/+/En1vwER5xaSW6ff6sNDpzPiUTlR6ERD5Tw=="
          __private_sig_cidr__: "192.168.1.0/24"

  ellis_profile:
    type: OS::Senlin::Profile
    properties:
      type: os.senlin.vdu-1.0
      properties:
        name: ellis
        flavor: {get_param: flavor}
        image: {get_param: image}
        networks:
          - network: { get_resource: mgmt_private_net }
            security_groups:
              - {get_resource: base_mgmt}
              - {get_resource: ellis_mgmt}
            floating_network: {get_param: floating_network_1}
        user_data: |
          #!/bin/bash
          echo "nameserver 10.142.7.1" > /etc/resolv.conf
          echo "{{ __dns_mgmt_ip__ }}" > /root/dns_ip.txt
          /etc/init.d/networking restart
          # Log all output to file.
          exec > >(tee -a /var/log/clearwater-heat-ellis.log) 2>&1
          set -x
          apt-get update
          apt-get install -y curl
          # Configure the APT software source.
          echo 'deb {{ __repo_url__ }} binary/' > /etc/apt/sources.list.d/clearwater.list
          curl -L http://repo.cw-ngv.com/repo_key | apt-key add -
          apt-get update

          # Configure /etc/clearwater/local_config.  Add xdms_hostname here to use Homer's management
          # hostname instead of signaling.  This will override shared_config.  This works around
          # https://github.com/Metaswitch/ellis/issues/153.
          mkdir -p /etc/clearwater
          etcd_ip={{ __etcd_ip__}}
          [ -n "$etcd_ip" ] || etcd_ip={{ ports.0.fixed_ips.0.ip_address }}
          cat > /etc/clearwater/local_config << EOF
          local_ip={{ ports.0.fixed_ips.0.ip_address }}
          public_ip={{ ports.0.floating_ip_address }}
          public_hostname=ellis-{{ __index__ }}.{{ __zone__ }}
          etcd_cluster=$etcd_ip
          xdms_hostname=homer-0.{{__zone__}}:7888
          EOF

          # Now install the software.
          DEBIAN_FRONTEND=noninteractive apt-get install ellis-node --yes --force-yes
          DEBIAN_FRONTEND=noninteractive apt-get install clearwater-management --yes --force-yes

          # Wait until etcd is up and running before uploading the shared_config
          /usr/share/clearwater/clearwater-etcd/scripts/wait_for_etcd

          # Configure and upload /etc/clearwater/shared_config.
          cat > /etc/clearwater/shared_config << EOF
          # Deployment definitions
          home_domain={{ __zone__ }}
          sprout_hostname=sprout.{{ __zone__ }}
          hs_hostname=hs.{{ __zone__ }}:8888
          hs_provisioning_hostname=hs-prov.{{ __zone__ }}:8889
          ralf_hostname=ralf.{{ __zone__ }}:10888
          xdms_hostname=homer.{{ __zone__ }}:7888

          upstream_port=0

          # Email server configuration
          smtp_smarthost=localhost
          smtp_username=username
          smtp_password=password
          email_recovery_sender=clearwater@example.org

          # Keys
          signup_key=secret
          turn_workaround=secret
          ellis_api_key=secret
          ellis_cookie_key=secret
          EOF
          sudo /usr/share/clearwater/clearwater-config-manager/scripts/upload_shared_config

          # Allocate a pool of numbers to assign to users.  Before we do this,
          # restart clearwater-infrastructure to make sure that
          # local_settings.py runs to pick up the configuration changes.
          service clearwater-infrastructure restart
          service ellis stop
          /usr/share/clearwater/ellis/env/bin/python /usr/share/clearwater/ellis/src/metaswitch/ellis/tools/create_numbers.py --start {{ __dn_range_start__ }} --count {{ __dn_range_length__ }}

          # Function to give DNS record type and IP address for specified IP address
          ip2rr() {
            if echo $1 | grep -q -e '[^0-9.]' ; then
              echo AAAA $1
            else
              echo A $1
            fi
          }

          # Update DNS
          retries=0
          while ! { nsupdate -y "{{ __zone__ }}:{{ __dnssec_key__ }}" -v << EOF
          server {{ __dns_mgmt_ip__ }}
          update add ellis-{{ __index__ }}.{{ __zone__ }}. 30 $(ip2rr {{ ports.0.floating_ip_address }})
          update add ellis.{{ __zone__ }}. 30 $(ip2rr {{ ports.0.floating_ip_address }})
          send
          EOF
          } && [ $retries -lt 10 ]
          do
            retries=$((retries + 1))
            echo 'nsupdate failed - retrying (retry '$retries')...'
            sleep 5
          done

          # Use the DNS server.
          echo 'nameserver {{ __dns_mgmt_ip__ }}' > /etc/dnsmasq.resolv.conf
          echo 'RESOLV_CONF=/etc/dnsmasq.resolv.conf' >> /etc/default/dnsmasq
          service dnsmasq force-reload

  ellis_cluster:
    type: OS::Senlin::Cluster
    depends_on:
      - signal_router_interface
      - mgmt_router_interface
    properties:
      desired_capacity: 1
      min_size: 1
      profile: {get_resource: ellis_profile}
      metadata:
        config:
          __zone__: "example.com"
          __dnssec_key__: "b9Ft/pBOWOwme5WL3YJ+QrH2i/ZiJarRNHMXlP5mSfjaxVreZ/+/En1vwER5xaSW6ff6sNDpzPiUTlR6ERD5Tw=="
          __repo_url__: "http://repo.cw-ngv.com/stable"
          __dn_range_start__: "6505550000"
          __dn_range_length__: 1000
          #__test__: {get_attr: [dns_cluster, collect]}
          #__test__: {get_attr: [dns_cluster, collect]}
#          __dns_mgmt_ip__: qq
          __dns_mgmt_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __etcd_ip__ : ""
          __index__: 0


  bono_profile:
    type: OS::Senlin::Profile
    properties:
      type: os.senlin.vdu-1.0
      properties:
        name: bono
        flavor: {get_param: flavor}
        image: {get_param: image}
        networks:
          - network: { get_resource: mgmt_private_net }
            security_groups:
              - {get_resource: base_mgmt}
            floating_network: {get_param: floating_network_1}
          - network: { get_resource: signal_private_net }
            security_groups:
              - {get_resource: bono_sig}
            floating_network: {get_param: floating_network_2}
            #floating_network: public_signal_network
        user_data: |
          #!/bin/bash
          echo "nameserver 10.142.7.1" > /etc/resolv.conf
          /etc/init.d/networking restart
          
          # Log all output to file.
          exec > >(tee -a /var/log/clearwater-heat-bono.log) 2>&1
          set -x
          
          # Set up the signaling network namespace on each boot by creating an init file and
          # linking to it from runlevel 2 and 3
          cat >/etc/init.d/signaling_namespace <<EOF
          #!/bin/bash
          # Create the signaling namespace and configure its interfaces.
          set -e
          
          # Exit if the namespace is already set up.
          ip netns list | grep -q signaling && exit 0
          
          # eth1 is the signaling interface (and eth0 is the management interface).
          # We need to set eth1 up manually - only eth0 is automatically configured via DHCP.
          ip netns add signaling
          ip link set eth1 netns signaling
          ip netns exec signaling ip link set dev lo up
          ip netns exec signaling ip addr add {{ ports.1.fixed_ips.0.ip_address }}/$(echo {{ __private_sig_cidr__ }} | cut -d / -f 2) dev eth1
          ip netns exec signaling ip link set dev eth1 up
          ip netns exec signaling ip route add default via {{ __private_sig_gateway__ }}
          EOF
          
          chmod a+x /etc/init.d/signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc2.d/S01signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc3.d/S01signaling_namespace
          
          # Also set up the signaling namespace now.
          /etc/init.d/signaling_namespace
          
          apt-get update
          apt-get install -y curl
          # Configure the APT software source.
          echo 'deb {{ __repo_url__ }} binary/' > /etc/apt/sources.list.d/clearwater.list
          curl -L http://repo.cw-ngv.com/repo_key | apt-key add -
          apt-get update
          
          # Configure /etc/clearwater/local_config.
          mkdir -p /etc/clearwater
          etcd_ip={{ __etcd_ip__ }}
          [ -n "$etcd_ip" ] || etcd_ip={{ ports.0.fixed_ips.0.ip_address }}
          cat > /etc/clearwater/local_config << EOF
          signaling_namespace=signaling
          signaling_dns_server={{ __dns_sig_ip__ }}
          management_local_ip={{ ports.0.fixed_ips.0.ip_address }}
          local_ip={{ ports.1.fixed_ips.0.ip_address }}
          public_ip={{ ports.1.floating_ip_address }}
          public_hostname={{ __index__ }}.bono.{{ __zone__ }}
          etcd_cluster=$etcd_ip
          EOF
          
          # Now install the software.
          DEBIAN_FRONTEND=noninteractive apt-get install bono-node --yes --force-yes
          DEBIAN_FRONTEND=noninteractive apt-get install clearwater-management --yes --force-yes
          
          # Function to give DNS record type and IP address for specified IP address
          ip2rr() {
          if echo $1 | grep -q -e '[^0-9.]' ; then
          echo AAAA $1
          else
          echo A $1
          fi
          }
          
          # Update DNS
          retries=0
          while ! { nsupdate -y "{{ __zone__ }}:{{ __dnssec_key__ }}" -v << EOF
          server {{ __dns_mgmt_ip__ }}
          update add bono-{{ __index__ }}.{{ __zone__ }}. 30 $(ip2rr {{ ports.0.floating_ip_address }})
          update add {{ __index__ }}.bono.{{ __zone__ }}. 30 $(ip2rr {{ ports.1.floating_ip_address }})
          update add {{ __zone__ }}. 30 $(ip2rr {{ ports.1.floating_ip_address }})
          update add {{ __zone__ }}. 30 NAPTR 0 0 "s" "SIP+D2T" "" _sip._tcp.{{ __zone__ }}.
          update add {{ __zone__ }}. 30 NAPTR 0 0 "s" "SIP+D2U" "" _sip._udp.{{ __zone__ }}.
          update add _sip._tcp.{{ __zone__ }}. 30 SRV 0 0 5060 {{ __index__ }}.bono.{{ __zone__ }}.
          update add _sip._udp.{{ __zone__ }}. 30 SRV 0 0 5060 {{ __index__ }}.bono.{{ __zone__ }}.
          send
          EOF
          } && [ $retries -lt 10 ]
          do
          retries=$((retries + 1))
          echo 'nsupdate failed - retrying (retry '$retries')...'
          sleep 5
          done
          
          # Use the DNS server.
          echo 'nameserver {{ __dns_mgmt_ip__ }}' > /etc/dnsmasq.resolv.conf
          echo 'RESOLV_CONF=/etc/dnsmasq.resolv.conf' >> /etc/default/dnsmasq
          mkdir -p /etc/netns/signaling
          echo 'nameserver {{ __dns_sig_ip__ }}' > /etc/netns/signaling/resolv.conf
          service dnsmasq force-reload


  bono_cluster:
    type: OS::Senlin::Cluster
    depends_on:
      - signal_router_interface
      - mgmt_router_interface
    properties:
      desired_capacity: 1
      min_size: 1
      profile: {get_resource: bono_profile}
      metadata:
        config:
          __zone__: "example.com"
          __dnssec_key__: "b9Ft/pBOWOwme5WL3YJ+QrH2i/ZiJarRNHMXlP5mSfjaxVreZ/+/En1vwER5xaSW6ff6sNDpzPiUTlR6ERD5Tw=="
          __repo_url__: "http://repo.cw-ngv.com/stable"
          __dns_mgmt_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __etcd_ip__ : {get_attr: [ellis_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __index__: 0
          __private_sig_cidr__: "192.168.1.0/24"
          __private_sig_gateway__: "192.168.1.254"
          __dns_sig_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-signal-private[0].addr", 0]}


  sprout_profile:
    type: OS::Senlin::Profile
    properties:
      type: os.senlin.vdu-1.0
      properties:
        name: sprout
        flavor: {get_param: flavor}
        image: {get_param: image}
        networks:
          - network: { get_resource: mgmt_private_net }
            security_groups:
              - {get_resource: base_mgmt}
            floating_network: {get_param: floating_network_1}
          - network: { get_resource: signal_private_net }
            security_groups:
              - {get_resource: sprout_sig}
              - {get_resource: sprout_sig2}
        user_data: |
          #!/bin/bash

          echo "nameserver 10.142.7.1" > /etc/resolv.conf
          /etc/init.d/networking restart

          # Log all output to file.
          exec > >(tee -a /var/log/clearwater-heat-sprout.log) 2>&1
          set -x

          # Set up the signaling network namespace on each boot by creating an init file and
          # linking to it from runlevel 2 and 3
          cat >/etc/init.d/signaling_namespace <<EOF
          #!/bin/bash
          # Create the signaling namespace and configure its interfaces.
          set -e

          # Exit if the namespace is already set up.
          ip netns list | grep -q signaling && exit 0

          # eth1 is the signaling interface (and eth0 is the management interface).
          # We need to set eth1 up manually - only eth0 is automatically configured via DHCP.
          ip netns add signaling
          ip link set eth1 netns signaling
          ip netns exec signaling ip link set dev lo up
          ip netns exec signaling ip addr add {{ ports.1.fixed_ips.0.ip_address }}/$(echo {{ __private_sig_cidr__ }} | cut -d / -f 2) dev eth1
          ip netns exec signaling ip link set dev eth1 up
          ip netns exec signaling ip route add default via {{ __private_sig_gateway__ }}
          EOF

          chmod a+x /etc/init.d/signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc2.d/S01signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc3.d/S01signaling_namespace

          # Also set up the signaling namespace now.
          /etc/init.d/signaling_namespace
          apt-get update
          apt-get install -y curl

          # Configure the APT software source.
          echo 'deb {{ __repo_url__ }} binary/' > /etc/apt/sources.list.d/clearwater.list
          curl -L http://repo.cw-ngv.com/repo_key | apt-key add -
          apt-get update

          # Configure /etc/clearwater/local_config.
          mkdir -p /etc/clearwater
          etcd_ip={{__etcd_ip__}}
          [ -n "$etcd_ip" ] || etcd_ip={{ ports.0.fixed_ips.0.ip_address }}
          cat > /etc/clearwater/local_config << EOF
          signaling_namespace=signaling
          signaling_dns_server={{__dns_sig_ip__}}
          management_local_ip={{ ports.0.fixed_ips.0.ip_address }}
          local_ip={{ ports.1.fixed_ips.0.ip_address }}
          public_ip={{ ports.1.fixed_ips.0.ip_address }}
          public_hostname={{__index__}}.sprout.{{__zone__}}
          etcd_cluster=$etcd_ip
          EOF

          # Create /etc/chronos/chronos.conf.
          mkdir -p /etc/chronos
          cat > /etc/chronos/chronos.conf << EOF
          [http]
          bind-address = {{ ports.1.fixed_ips.0.ip_address }}
          bind-port = 7253
          threads = 50

          [logging]
          folder = /var/log/chronos
          level = 2

          [alarms]
          enabled = true

          [exceptions]
          max_ttl = 600
          EOF

          # Now install the software.
          DEBIAN_FRONTEND=noninteractive apt-get install sprout-node --yes --force-yes
          DEBIAN_FRONTEND=noninteractive apt-get install clearwater-management --yes --force-yes

          # Function to give DNS record type and IP address for specified IP address
          ip2rr() {
            if echo $1 | grep -q -e '[^0-9.]' ; then
              echo AAAA $1
            else
              echo A $1
            fi
          }

          # Update DNS
          retries=0
          while ! { nsupdate -y "{{__zone__}}:{{__dnssec_key__}}" -v << EOF
          server {{__dns_mgmt_ip__}}
          update add sprout-{{__index__}}.{{__zone__}}. 30 $(ip2rr {{ ports.0.floating_ip_address }})
          update add {{__index__}}.{{sprout}}.{{__zone__}}. 30 $(ip2rr {{ ports.1.fixed_ips.0.ip_address }})
          update add sprout.{{__zone__}}. 30 $(ip2rr {{ ports.1.fixed_ips.0.ip_address }})
          update add scscf.sprout.{{__zone__}}. 30 $(ip2rr {{ ports.1.fixed_ips.0.ip_address }})
          update add icscf.sprout.{{__zone__}}. 30 $(ip2rr {{ ports.1.fixed_ips.0.ip_address }})
          update add sprout.{{__zone__}}. 30 NAPTR 0 0 "s" "SIP+D2T" "" _sip._tcp.sprout.{{__zone__}}.
          update add _sip._tcp.sprout.{{__zone__}}. 30 SRV 0 0 5054 {{__index__}}.sprout.{{__zone__}}.
          update add icscf.sprout.{{__zone__}}. 30 NAPTR 0 0 "s" "SIP+D2T" "" _sip._tcp.icscf.sprout.{{__zone__}}.
          update add _sip._tcp.icscf.sprout.{{__zone__}}. 30 SRV 0 0 5052 {{__index__}}.sprout.{{__zone__}}.
          update add scscf.sprout.{{__zone__}}. 30 NAPTR 0 0 "s" "SIP+D2T" "" _sip._tcp.scscf.sprout.{{__zone__}}.
          update add _sip._tcp.scscf.sprout.{{__zone__}}. 30 SRV 0 0 5054 {{__index__}}.sprout.{{__zone__}}.
          send
          EOF
          } && [ $retries -lt 10 ]
          do
            retries=$((retries + 1))
            echo 'nsupdate failed - retrying (retry '$retries')...'
            sleep 5
          done

          # Use the DNS server.
          echo 'nameserver {{__dns_mgmt_ip__}}' > /etc/dnsmasq.resolv.conf
          echo 'RESOLV_CONF=/etc/dnsmasq.resolv.conf' >> /etc/default/dnsmasq
          mkdir -p /etc/netns/signaling
          echo 'nameserver {{__dns_sig_ip__}}' > /etc/netns/signaling/resolv.conf
          service dnsmasq force-reload



  sprout_cluster:
    type: OS::Senlin::Cluster
    depends_on:
      - signal_router_interface
      - mgmt_router_interface
    properties:
      desired_capacity: 1
      min_size: 1
      profile: {get_resource: sprout_profile}
      metadata:
        config:
          __zone__: "example.com"
          __dnssec_key__: "b9Ft/pBOWOwme5WL3YJ+QrH2i/ZiJarRNHMXlP5mSfjaxVreZ/+/En1vwER5xaSW6ff6sNDpzPiUTlR6ERD5Tw=="
          __repo_url__: "http://repo.cw-ngv.com/stable"
          __dns_mgmt_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __etcd_ip__ : {get_attr: [ellis_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __index__: 0
          __private_sig_cidr__: "192.168.1.0/24"
          __private_sig_gateway__: "192.168.1.254"
          __dns_sig_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-signal-private[0].addr", 0]}


  homer_profile:
    type: OS::Senlin::Profile
    properties:
      type: os.senlin.vdu-1.0
      properties:
        name: homer
        flavor: {get_param: flavor}
        image: {get_param: image}
        networks:
          - network: { get_resource: mgmt_private_net }
            security_groups:
              - {get_resource: base_mgmt}
              - {get_resource: homer_mgmt}
            floating_network: {get_param: floating_network_1}
          - network: { get_resource: signal_private_net }
            security_groups:
              - {get_resource: homer_sig}
            floating_network: {get_param: floating_network_2}
            #floating_network: public_signal_network
        user_data: |
          #!/bin/bash

          echo "nameserver 10.142.7.1" > /etc/resolv.conf
          /etc/init.d/networking restart
          # Log all output to file.
          exec > >(tee -a /var/log/clearwater-heat-homer.log) 2>&1
          set -x

          # Set up the signaling network namespace on each boot by creating an init file and
          # linking to it from runlevel 2 and 3
          cat >/etc/init.d/signaling_namespace <<EOF
          #!/bin/bash
          # Create the signaling namespace and configure its interfaces.
          set -e

          # Exit if the namespace is already set up.
          ip netns list | grep -q signaling && exit 0

          # eth1 is the signaling interface (and eth0 is the management interface).
          # We need to set eth1 up manually - only eth0 is automatically configured via DHCP.
          ip netns add signaling
          ip link set eth1 netns signaling
          ip netns exec signaling ip link set dev lo up
          ip netns exec signaling ip addr add {{ ports.1.fixed_ips.0.ip_address }}/$(echo {{__private_sig_cidr__}} | cut -d / -f 2) dev eth1
          ip netns exec signaling ip link set dev eth1 up
          ip netns exec signaling ip route add default via {{__private_sig_gateway__}}
          EOF

          chmod a+x /etc/init.d/signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc2.d/S01signaling_namespace
          ln -s /etc/init.d/signaling_namespace /etc/rc3.d/S01signaling_namespace

          # Also set up the signaling namespace now.
          /etc/init.d/signaling_namespace

          apt-get update
          apt-get install -y curl
          # Configure the APT software source.
          echo 'deb {{__repo_url__}} binary/' > /etc/apt/sources.list.d/clearwater.list
          curl -L http://repo.cw-ngv.com/repo_key | apt-key add -
          apt-get update

          # Configure /etc/clearwater/local_config.
          mkdir -p /etc/clearwater
          etcd_ip={{__etcd_ip__}}
          [ -n "$etcd_ip" ] || etcd_ip={{ ports.0.fixed_ips.0.ip_address }}
          cat > /etc/clearwater/local_config << EOF
          signaling_namespace=signaling
          signaling_dns_server={{__dns_sig_ip__}}
          management_local_ip={{ ports.0.fixed_ips.0.ip_address }}
          local_ip={{ ports.1.fixed_ips.0.ip_address }}
          public_ip={{ ports.1.floating_ip_address }}
          public_hostname=homer-{{__index__}}.{{__zone__}}
          etcd_cluster=$etcd_ip
          EOF

          # Now install the software.
          DEBIAN_FRONTEND=noninteractive apt-get install homer-node --yes --force-yes
          DEBIAN_FRONTEND=noninteractive apt-get install clearwater-management --yes --force-yes

          # Function to give DNS record type and IP address for specified IP address
          ip2rr() {
            if echo $1 | grep -q -e '[^0-9.]' ; then
              echo AAAA $1
            else
              echo A $1
            fi
          }

          # Update DNS
          retries=0
          while ! { nsupdate -y "{{__zone__}}:{{__dnssec_key__}}" -v << EOF
          server {{__dns_mgmt_ip__}}
          update add homer-{{__index__}}.{{__zone__}}. 30 $(ip2rr {{ ports.0.floating_ip_address }})
          update add homer.{{__zone__}}. 30 $(ip2rr {{ ports.1.floating_ip_address }})
          send
          EOF
          } && [ $retries -lt 10 ]
          do
            retries=$((retries + 1))
            echo 'nsupdate failed - retrying (retry '$retries')...'
            sleep 5
          done

          # Use the DNS server.
          # Use the DNS server.
          echo 'nameserver {{__dns_mgmt_ip__}}' > /etc/dnsmasq.resolv.conf
          echo 'RESOLV_CONF=/etc/dnsmasq.resolv.conf' >> /etc/default/dnsmasq
          mkdir -p /etc/netns/signaling
          echo 'nameserver {{__dns_sig_ip__}}' > /etc/netns/signaling/resolv.conf
          service dnsmasq force-reload


  homer_cluster:
    type: OS::Senlin::Cluster
    depends_on:
      - signal_router_interface
      - mgmt_router_interface
    properties:
      desired_capacity: 1
      min_size: 1
      profile: {get_resource: homer_profile}
      metadata:
        config:
          __zone__: "example.com"
          __dnssec_key__: "b9Ft/pBOWOwme5WL3YJ+QrH2i/ZiJarRNHMXlP5mSfjaxVreZ/+/En1vwER5xaSW6ff6sNDpzPiUTlR6ERD5Tw=="
          __repo_url__: "http://repo.cw-ngv.com/stable"
          __dns_mgmt_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __etcd_ip__ : {get_attr: [ellis_cluster, collect, "details.addresses.clearwater-mgmt-private[0].addr", 0]}
          __index__: 0
          __private_sig_cidr__: "192.168.1.0/24"
          __private_sig_gateway__: "192.168.1.254"
          __dns_sig_ip__: {get_attr: [dns_cluster, collect, "details.addresses.clearwater-signal-private[0].addr", 0]}