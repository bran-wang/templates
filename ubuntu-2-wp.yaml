heat_template_version: 2013-05-23

description: >
  An example Heat Orchestration Template (HOT).
  WordPress is web software you can use to create a beautiful website
  or blog. This template installs two instances: one running a
  WordPress deployment and the other using a local MySQL database to
  store the data.

parameters:

  key_name:
    type: string
    description : Name of a KeyPair to enable SSH access to the instance
    default: lxiaojun

  instance_type:
    type: string
    description: Instance type for web and DB servers
    default: m1.small
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  image_id:
    type: string
    description: >
      Name or ID of the image to use for the WordPress server.
      Recommended values are fedora-20.i386 or fedora-20.x86_64;
      get them from http://cloud.fedoraproject.org/fedora-20.i386.qcow2
      or http://cloud.fedoraproject.org/fedora-20.x86_64.qcow2 .
    default: U10-x86_64-cfntools

  db_name:
    type: string
    description: WordPress database name
    default: wordpress
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters

  db_username:
    type: string
    description: The WordPress database admin account username
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters

  db_password:
    type: string
    description: The WordPress database admin account password
    default: Passw0rd
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_username must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters

  db_root_password:
    type: string
    description: Root password for MySQL
    default: Passw0rd
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_username must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters

  root_password:
    type: string
    description: Password for root user
    default: Passw0rd
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: root_password must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: root_password must contain only alphanumeric characters

resources:
  DatabaseServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            cat << EOF | passwd root
            root_password
            root_password
            EOF
            sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf
            chkconfig mysql on
            service mysql restart
            # Setup MySQL root password and create a user
            cat << EOF | mysql -uroot
            UPDATE mysql.user SET Password=PASSWORD('db_rootpassword') WHERE User='root';
            CREATE DATABASE db_name;
            GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"%"
            IDENTIFIED BY "db_password";
            FLUSH PRIVILEGES;
            EXIT
            EOF
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }
            root_password: { get_param: root_password }

  WebServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            cat << EOF | passwd root
            root_password
            root_password
            EOF
            ln -s /usr/share/wordpress /var/www/wordpress
            cat << EOF > /etc/apache2/sites-available/wordpress
            Alias /blog /usr/share/wordpress
            Alias /blog/wp-content /var/lib/wordpress/wp-content
            <Directory /usr/share/wordpress>
                Options FollowSymLinks
                AllowOverride Limit Options FileInfo
                DirectoryIndex index.php
                Order allow,deny
                Allow from all
            </Directory>
            <Directory /var/lib/wordpress/wp-content>
                Options FollowSymLinks
                Order allow,deny
                Allow from all
            </Directory>
            EOF
            cat << EOF > /etc/wordpress/config-default.php
            <?php
            define('DB_NAME', 'db_name');
            define('DB_USER', 'db_user');
            define('DB_PASSWORD', 'db_password');
            define('DB_HOST', 'db_ipaddr');
            define('WP_CONTENT_DIR', '/var/lib/wordpress/wp-content');
            ?>
            EOF
            chkconfig apache2 on
            service apache2 restart
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }
            db_ipaddr: { get_attr: [DatabaseServer, networks, private, 0] }
            root_password: { get_param: root_password }

outputs:
  WebsiteURL:
    description: URL for Wordpress wiki
    value:
      str_replace:
        template: http://host/wordpress
        params:
          host: { get_attr: [WebServer, networks, private, 0] }
